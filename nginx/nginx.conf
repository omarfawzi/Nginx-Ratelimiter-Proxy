env UPSTREAM_HOST;
env UPSTREAM_PORT;
env UPSTREAM_TYPE;
env INDEX_FILE;
env SCRIPT_FILENAME;
env CACHE_PROVIDER;
env CACHE_HOST;
env CACHE_PREFIX;
env CACHE_PORT;
env CACHE_ALGO;
env REMOTE_IP_KEY;
env PROMETHEUS_METRICS_ENABLED;

worker_processes auto;

events {}

http {
    include "resolver.conf";
    include "*http_snippet.conf";

    lua_shared_dict prometheus_metrics 10M;
    lua_shared_dict global_throttle_cache 50m;

    init_by_lua_block {
        local required_env_vars = {
            "CACHE_PROVIDER",
            "CACHE_HOST",
            "CACHE_PREFIX",
            "CACHE_PORT",
            "UPSTREAM_TYPE",
            "UPSTREAM_HOST",
            "UPSTREAM_PORT",
            "REMOTE_IP_KEY"
        }
        for _, var in ipairs(required_env_vars) do
            if not os.getenv(var) then
                ngx.log(ngx.ERR, 'Missing required environment variable: ', var)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
        end

        local yaml = require('lyaml')
        local file = io.open('/usr/local/openresty/nginx/lua/ratelimits.yaml', 'r')
        if not file then
            ngx.log(ngx.ERR, 'failed to open /usr/local/openresty/nginx/lua/ratelimits.yaml.')
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end

        local content = file:read("*all")
        file:close()

        local success, parsed_yaml = pcall(yaml.load, content)
        if not success then
            ngx.log(ngx.ERR, 'failed to parse YAML: ', parsed_yaml)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        end

        _G.rules = parsed_yaml.rules or {}
        _G.ignored_users = parsed_yaml.ignoredSegments and parsed_yaml.ignoredSegments.users or {}
        _G.ignored_ips = parsed_yaml.ignoredSegments and parsed_yaml.ignoredSegments.ips or {}
        _G.ignored_urls = parsed_yaml.ignoredSegments and parsed_yaml.ignoredSegments.urls or {}
    }

    init_worker_by_lua_block {
        if os.getenv("PROMETHEUS_METRICS_ENABLED") == "true" then
            prometheus = require("prometheus").init("prometheus_metrics")
            metric_requests = prometheus:counter("nginx_proxy_http_requests_total", "Number of HTTP requests", {"host", "status"})
            metric_latency = prometheus:histogram("nginx_proxy_http_request_duration_seconds", "HTTP request latency", {"host"})
            metric_connections = prometheus:gauge("nginx_proxy_http_connections", "Number of HTTP connections", {"state"})
        end
    }

    log_by_lua_block {
        if os.getenv("PROMETHEUS_METRICS_ENABLED") == "true" then
            metric_requests:inc(1, {ngx.var.hostname, ngx.var.status})
            metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.hostname})
        end
    }

    log_format custom_format '{"@timestamp": "$time_iso8601",'
                             '"nginx_request_uri": "$request_uri",'
                             '"nginx_remote_addr": "$remote_addr",'
                             '"nginx_remote_user": "$remote_user",'
                             '"nginx_request_method": "$request_method",'
                             '"nginx_request_status": "$status",'
                             '"nginx_request_length": "$request_length",'
                             '"nginx_http_referer": "$http_referer",'
                             '"nginx_request_time": "$request_time",'
                             '"nginx_gzip_ratio": "$gzip_ratio",'
                             '"nginx_http_host": "$http_host",'
                             '"nginx_http_x_request_id": "$http_x_request_id",'
                             '"nginx_http_x_debug": "$http_x_debug",'
                             '"nginx_upstream_cache_status": "$upstream_cache_status",'
                             '"nginx_http_cf_ipcountry": "$http_cf_ipcountry",'
                             '"nginx_cf_bot_score": "$http_cf_bot_score",'
                             '"nginx_cf_verified_bot": "$http_cf_verified_bot",'
                             '"nginx_upstream_addr": "$upstream_addr",'
                             '"nginx_upstream_response_length": "$upstream_response_length",'
                             '"nginx_upstream_response_time": "$upstream_response_time",'
                             '"nginx_upstream_status": "$upstream_status",'
                             '"nginx_proxy_protocol_addr": "$proxy_protocol_addr",'
                             '"nginx_body_bytes_sent": "$body_bytes_sent",'
                             '"nginx_agent": "$http_user_agent",'
                             '"nginx_cf_connecting_ip": "$http_cf_connecting_ip",'
                             '"nginx_realip_remote_addr": "$realip_remote_addr"}';

    access_log /dev/stdout custom_format;
    error_log /dev/stderr warn;

    server {
        listen 80;
        include "*server_snippet.conf";

        location / {
            set_by_lua $upstream_host 'return os.getenv("UPSTREAM_HOST") or "127.0.0.1"';
            set_by_lua $upstream_port 'return os.getenv("UPSTREAM_PORT") or "80"';
            set_by_lua $upstream_type 'return os.getenv("UPSTREAM_TYPE") or "http"';
            set_by_lua $index_file 'return os.getenv("INDEX_FILE") or "index.php"';
            set_by_lua $script_file_name 'return os.getenv("SCRIPT_FILENAME") or "/var/www/app/public/index.php"';
            access_by_lua_file /usr/local/openresty/nginx/lua/main.lua;

            content_by_lua_block {
                local upstream_type = ngx.var.upstream_type
                if upstream_type == "fastcgi" then
                    ngx.exec("@fastcgi_backend")
                else
                    ngx.exec("@http_backend")
                end
            }
        }

        location @http_backend {
            include "*location_snippet.conf";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://$upstream_host:$upstream_port;
        }

        location @fastcgi_backend {
            include "*location_snippet.conf";
            fastcgi_pass $upstream_host:$upstream_port;
            include fastcgi_params;
            fastcgi_param  HOST $host;
            fastcgi_param  X-Real-IP $remote_addr;
            fastcgi_param  X-Forwarded-For $proxy_add_x_forwarded_for;
            fastcgi_param  X-Forwarded-Proto $scheme;
            fastcgi_index $index_file;
            fastcgi_param SCRIPT_FILENAME "$script_file_name";
        }
    }

    server {
        listen 9145;
        location /metrics {
            content_by_lua_block {
                if os.getenv("PROMETHEUS_METRICS_ENABLED") == "true" then
                    metric_connections:set(ngx.var.connections_active, {"active"})
                    metric_connections:set(ngx.var.connections_reading, {"reading"})
                    metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                    metric_connections:set(ngx.var.connections_writing, {"writing"})
                    prometheus:collect()
                else
                    ngx.exit(404)
                end
            }
        }
    }
}

